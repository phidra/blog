<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phidra&#39;s blog</title>
    <link>https://phidra.github.io/blog/</link>
    <description>Recent content on Phidra&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Tue, 17 Mar 2020 22:14:41 +0100</lastBuildDate>
    
	<atom:link href="https://phidra.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Packaging python</title>
      <link>https://phidra.github.io/blog/2020-03-17-packaging-python/</link>
      <pubDate>Tue, 17 Mar 2020 22:14:41 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-03-17-packaging-python/</guid>
      <description>Comme beaucoup d&amp;#8217;autres avant moi, je fais un article sur le packaging python.
 Je ne vais pas cependant PAS expliquer comment packager son projet (ou pas beaucoup, et ça reste facultatif ^^) : à la place, je vais essayer d&amp;#8217;expliquer grossièrement ce dont on parle quand on s&amp;#8217;intéresse au packaging, et clarifier une confusion fréquente — en tout cas que j&amp;#8217;ai faite moi.
 Ce post n&amp;#8217;est donc pas suffisant pour naviguer comme un poisson dans les eaux du packaging python, l&amp;#8217;objectif est plutôt d&amp;#8217;en sortir un peu mieux armé pour utiliser les autres ressources sur le sujet : docs, articles, tutos, etc.</description>
    </item>
    
    <item>
      <title>Mes références</title>
      <link>https://phidra.github.io/blog/menu/references/</link>
      <pubDate>Mon, 16 Mar 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/menu/references/</guid>
      <description>Liste non-exhaustive (à compléter), et pas particulièrement triée (c&amp;#8217;est pas parce qu&amp;#8217;un item est en haut que je le juge mieux que son voisin du dessous)
   Internal Pointers : a l&amp;#8217;air de regrouper des articles sur divers sujets dont des sujets tech. Pour le moment, je n&amp;#8217;ai lu que quelques articles (sur la concurrence et sur les type traits, notamment), mais ils étaient très pédagogiques. C&amp;#8217;est pas hyper clair qui est derrière.</description>
    </item>
    
    <item>
      <title>À propos</title>
      <link>https://phidra.github.io/blog/menu/about/</link>
      <pubDate>Mon, 16 Mar 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/menu/about/</guid>
      <description>C&amp;#8217;est quoi ce blog ? Je suis Phidra, développeur depuis une douzaine d&amp;#8217;années → la majorité des posts devrait concerner des sujets liés de près ou de loin au développement, du C++ (exemple : make_shared) et du python (exemple : packaging python) qui sont mes langages principaux, mais également des structures de données ou algorithmes (exemple : Sattolo), des outils (exemple : man), voire des sujets liés à la vie de développeur (exemple : projet Aristote).</description>
    </item>
    
    <item>
      <title>Qu&#39;est-ce qui fait une équipe efficace ?</title>
      <link>https://phidra.github.io/blog/2020-03-11-aristotle-project/</link>
      <pubDate>Wed, 11 Mar 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-03-11-aristotle-project/</guid>
      <description>Si on vous posait la question, qu&amp;#8217;est-ce que vous répondriez ? De mon côté, j&amp;#8217;aurais sans doute répondu des éléments autour de :
   des membres compétents
  des membres qui s&amp;#8217;entendent bien
  un niveau technique homogène (ou au contraire disparate ?)
  des membres qui savent travailler en équipe (ça veut dire quoi, d&amp;#8217;ailleurs ?)
  une équipe à taille humaine
  &amp;#8230;&amp;#8203;</description>
    </item>
    
    <item>
      <title>Shuffle, Fisher-Yates, et Sattolo</title>
      <link>https://phidra.github.io/blog/2020-02-28-shuffle/</link>
      <pubDate>Fri, 28 Feb 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-02-28-shuffle/</guid>
      <description>Position du problème Je suis tombé sur un article très intéressant, j&amp;#8217;avais commencé à prendre des notes, mais ça se finit en post :-)
 Étant donné un jeu de N cartes, comment le mélanger de telle sorte que chaque permutation possible soit équi-probable ?
 Exemple concret : prenons un jeu de 5 cartes ABCDE :
  Figure 1. Jeu de 5 cartes  L&amp;#8217;objectif final est de le mélanger :</description>
    </item>
    
    <item>
      <title>RTFM ?</title>
      <link>https://phidra.github.io/blog/2020-02-20-man/</link>
      <pubDate>Thu, 20 Feb 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-02-20-man/</guid>
      <description>Position du problème La plupart du temps, quand j&amp;#8217;utilise man, je m&amp;#8217;embête pas, et je fais par exemple :
 man tar   Mais on trouve parfois une syntaxe précisant un numéro, assortie parfois d&amp;#8217;une vague mention de &#34;sections&#34;. Par exemple :
 man 2 close   J&amp;#8217;avais toujours supposé sans jamais le vérifier que ces commandes avaient leur manuel découpé en plusieurs &#34;chapitres&#34;, et que ce numéro était le numéro du chapitre : man 3 zlib était équivalent à ouvre le troisième chapitre du man de zlib.</description>
    </item>
    
    <item>
      <title>Articles, talks, blogposts, et autres liens</title>
      <link>https://phidra.github.io/blog/menu/notes/</link>
      <pubDate>Tue, 18 Feb 2020 12:38:15 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/menu/notes/</guid>
      <description>Liste des liens    Pourquoi cette page [POST] Systems design for Advanced Beginners [POST] Our journey to type checking 4 million lines of Python [VIDEO] 19. Dynamic Programming I: Fibonacci, Shortest Paths [ARTICLE] Safe Systems Programming in Rust:The Promise and the Challenge [POST] My Coding Interview Style [VIDEO] P vs NP et le zoo de complexité informatique [ARTICLE] A brief introduction to C++’s model for type- and resource-safety [POST] A modern ‘Hello, World’ program needs more than just code [ARTICLE] Low-Cost Deterministic C++ Exceptions for Embedded Systems [SITE] The Computer Language Benchmarks Game [VIDEO] L&amp;#8217;API Management : au-delà des promesses [POST] The Day The Standard Library Died [POST] Advantages of monorepos [SITE] C&amp;#43;&amp;#43; Frequently Questioned Answers [POST] Fastest Way to Load Data Into PostgreSQL Using Python [POST] Exceptions [POST] Réussir la Developer eXperience de son API web [POST] Designer une API REST [POST] How to Make Other Developers Hate to Work with You [POST] Demystifying C++ lambdas [STACKOVERFLOW] Is int safe to read from multiple threads?</description>
    </item>
    
    <item>
      <title>Intérêt de make_shared</title>
      <link>https://phidra.github.io/blog/2020-02-15-make_shared/</link>
      <pubDate>Fri, 14 Feb 2020 15:08:25 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-02-15-make_shared/</guid>
      <description>C&amp;#8217;est quoi le problème, avec make_shared ? Quel est l&amp;#8217;intérêt de make_shared ? Après tout, on peut tout à fait s&amp;#8217;en passer pour créer des shared_ptr :
 shared_ptr&amp;lt;int&amp;gt; age{new int(42)};   Quel est l&amp;#8217;intérêt de la ligne ci-dessous par rapport à la précédente ?
 shared_ptr&amp;lt;int&amp;gt; age = make_shared&amp;lt;int&amp;gt;(42);   TL;DR : c&amp;#8217;est plus un peu plus efficace, et un peu moins risqué.
   Mais au fait, ça marche comment, shared_ptr ?</description>
    </item>
    
  </channel>
</rss>