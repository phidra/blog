<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phidra&#39;s blog</title>
    <link>https://phidra.github.io/blog/</link>
    <description>Recent content on Phidra&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Wed, 01 Jan 2020 12:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://phidra.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Saut de ligne en fin de fichier</title>
      <link>https://phidra.github.io/blog/2020-11-20-saut-de-ligne-final/</link>
      <pubDate>Fri, 20 Nov 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-11-20-saut-de-ligne-final/</guid>
      <description>De quoi va-t-on causer : Tout commence en parsant du CSV Faut-il un saut de ligne final ? Robust or not robust ? Conclusion = ce qu&amp;#8217;il faut retenir Annexe n°1 = visualiser le saut de ligne final Annexe n°2 = intérêt des sauts de lignes Annexe n°3 = pourquoi j&amp;#8217;ai voulu utiliser .good() Annexe n°4 = quelle différence entre getline(&amp;#8230;&amp;#8203;) et getline(&amp;#8230;&amp;#8203;).good() ? Annexe n°5 = liens utiles     Tout commence en parsant du CSV Récemment, j&amp;#8217;ai eu à parser un fichier CSV en C++.</description>
    </item>
    
    <item>
      <title>Où linker ses librairies</title>
      <link>https://phidra.github.io/blog/2020-11-03-linker-options-order/</link>
      <pubDate>Tue, 03 Nov 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-11-03-linker-options-order/</guid>
      <description>Mise en situation Allez, pour une fois, on attaque cash pistache avec du code :
 #include &amp;lt;iostream&amp;gt; #include &amp;lt;zlib.h&amp;gt; int main(void) { std::cout &amp;lt;&amp;lt; &amp;quot;zlib version = &amp;quot; &amp;lt;&amp;lt; zlibVersion() &amp;lt;&amp;lt; std::endl; return 0; }   On a un main.cpp qui utilise une librairie, en l&amp;#8217;occurence la zlib ; la question du jour concerne la commande à utiliser pour le builder. On trouve parfois ce type de commande :</description>
    </item>
    
    <item>
      <title>Un usage de std::ref</title>
      <link>https://phidra.github.io/blog/2020-08-31-std-ref/</link>
      <pubDate>Mon, 31 Aug 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-08-31-std-ref/</guid>
      <description>De quoi va-t-on causer : ce qu&amp;#8217;en dit la doc conversion implicite en T&amp;amp; et std::ref dans tout ça ? exemple 1 : std::bind exemple 2 : std::thread résumé et autre usage   Je repars aujourd&amp;#8217;hui de ce post sur std::reference_wrapper, pour expliquer l&amp;#8217;intérêt de std::ref dans les appels de fonctions template.
 Dans un précédent post, on a lancé un calcul lourd dans un thread détaché du thread principal comme ceci :</description>
    </item>
    
    <item>
      <title>Bash et les nested quotes</title>
      <link>https://phidra.github.io/blog/2020-08-19-nested-quotes-in-bash/</link>
      <pubDate>Wed, 19 Aug 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-08-19-nested-quotes-in-bash/</guid>
      <description>Pourquoi mettre des quotes Même s&amp;#8217;ils sont bien pratiques car utilisables presque partout et proches du système, dès que j&amp;#8217;ai un besoin complexe, je préfère éviter les scripts bash.
 L&amp;#8217;une des raisons à cela est que la gestion des chaînes de caractères est bug-prone. Prenons l&amp;#8217;exemple d&amp;#8217;un fichier dans un répertoire, avec les deux noms contenant un espace :
 mkdir &amp;quot;this directory&amp;quot; myfile=&amp;quot;this directory/that file.txt&amp;quot; touch &amp;quot;$myfile&amp;quot; tree # .</description>
    </item>
    
    <item>
      <title>Application pratique du paradoxe des anniversaires</title>
      <link>https://phidra.github.io/blog/2020-08-08-birthday-problem/</link>
      <pubDate>Sat, 08 Aug 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-08-08-birthday-problem/</guid>
      <description>De quoi va-t-on causer : Création d&amp;#8217;une base temporaire Paradoxe des anniversaires Implémentations alternatives Le meilleur code est celui qu&amp;#8217;on n&amp;#8217;écrit pas Pour conclure     Création d&amp;#8217;une base temporaire Lors d&amp;#8217;une revue de code, je suis tombé récemment sur la création d&amp;#8217;une base de données temporaire :
 db_name = &amp;quot;test_{}&amp;quot;.format(randrange(1000))   Le contexte : un test a besoin d&amp;#8217;une base de données vierge, il créée donc une base temporaire dont le nom est celui de la ligne ci-dessus, puis la supprime après utilisation.</description>
    </item>
    
    <item>
      <title>Concurrence et parallélisme</title>
      <link>https://phidra.github.io/blog/2020-06-09-concurrency-vs-parallelism/</link>
      <pubDate>Tue, 09 Jun 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-06-09-concurrency-vs-parallelism/</guid>
      <description>De quoi va-t-on causer : Concurrence == parallélisme ? Concurrence Parallélisme Un peu de code BONUS = toi aussi, ralentis ton programme en le parallélisant     Concurrence == parallélisme ? À l&amp;#8217;oral, on mélange souvent concurrence et parallélisme. D&amp;#8217;ailleurs, en première approche, à la question &#34;C&amp;#8217;est quoi un programme qui exécute des tâches concurrentes ?&#34;, on serait tenté de répondre :
  — C&amp;#8217;est un programme qui exécute plusieurs tâches en même temps.</description>
    </item>
    
    <item>
      <title>R-tree et applications</title>
      <link>https://phidra.github.io/blog/2020-05-01-rtree/</link>
      <pubDate>Fri, 01 May 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-05-01-rtree/</guid>
      <description>De quoi va-t-on causer : Une histoire de graphe One solution : revolution rectangulation Let me see the code Pour conclure     Une histoire de graphe Supposons qu&amp;#8217;on veuille implémenter un calculateur d&amp;#8217;itinéraire permettant de retrouver le plus court chemin entre deux lieux quelconques de Bordeaux. Par exemple, on veut trouver le plus court chemin entre la place de la Victoire et &#34;chez moi&#34;.
 Pour cela, on dispose d&amp;#8217;une liste de toutes les rues de Bordeaux, accompagnées de leur géométrie.</description>
    </item>
    
    <item>
      <title>Packaging python</title>
      <link>https://phidra.github.io/blog/2020-03-17-packaging-python/</link>
      <pubDate>Tue, 17 Mar 2020 22:14:41 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-03-17-packaging-python/</guid>
      <description>Comme beaucoup (beaucoup) d&amp;#8217;autres avant moi, je blogge sur le packaging python.
 Je ne vais pas cependant PAS expliquer comment packager son projet (ou pas beaucoup, et ça restera facultatif ^^). À la place, je vais essayer d&amp;#8217;expliquer grossièrement ce dont on parle quand on s&amp;#8217;intéresse au packaging, et clarifier une confusion fréquente — en tout cas que j&amp;#8217;ai faite moi.
 Ce post n&amp;#8217;est donc pas suffisant pour naviguer comme un poisson dans les eaux du packaging python, l&amp;#8217;objectif est plutôt d&amp;#8217;en sortir un peu mieux armé pour utiliser les autres ressources sur le sujet : docs, articles, tutos, etc.</description>
    </item>
    
    <item>
      <title>Qu&#39;est-ce qui fait une équipe efficace ?</title>
      <link>https://phidra.github.io/blog/2020-03-11-aristotle-project/</link>
      <pubDate>Wed, 11 Mar 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-03-11-aristotle-project/</guid>
      <description>Si on vous posait la question, qu&amp;#8217;est-ce que vous répondriez ? Pour ma part, j&amp;#8217;aurais sans doute avancé des éléments comme :
   des membres compétents
  des membres qui s&amp;#8217;entendent bien
  un niveau technique homogène (ou au contraire disparate ?)
  des membres qui savent travailler en équipe (ça veut dire quoi, ça, d&amp;#8217;ailleurs ?)
  une équipe à taille humaine
  &amp;#8230;&amp;#8203;</description>
    </item>
    
    <item>
      <title>Shuffle, Fisher-Yates, et Sattolo</title>
      <link>https://phidra.github.io/blog/2020-02-28-shuffle/</link>
      <pubDate>Fri, 28 Feb 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-02-28-shuffle/</guid>
      <description>Position du problème Je suis tombé sur un article très intéressant, j&amp;#8217;avais commencé à prendre des notes, mais ça se finit en post :-)
 Étant donné un jeu de N cartes, comment le mélanger de telle sorte que chaque permutation possible ait la même probabilité d&amp;#8217;être choisie ?
 Exemple concret : prenons un jeu de 5 cartes ABCDE :
  Figure 1. Jeu de 5 cartes  L&amp;#8217;objectif final est de le mélanger :</description>
    </item>
    
    <item>
      <title>RTFM ?</title>
      <link>https://phidra.github.io/blog/2020-02-20-man/</link>
      <pubDate>Thu, 20 Feb 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-02-20-man/</guid>
      <description>Position du problème La plupart du temps, quand j&amp;#8217;utilise man, je m&amp;#8217;embête pas, et je fais par exemple :
 man tar   Mais on trouve de temps à autre une syntaxe précisant un numéro, assortie parfois d&amp;#8217;une vague mention de &#34;sections&#34;. Par exemple :
 man 3 zlib   J&amp;#8217;avais toujours supposé sans jamais le vérifier que ces commandes avaient leur manuel découpé en plusieurs &#34;chapitres&#34;, et que ce numéro était le numéro du chapitre : man 3 zlib était équivalent à ouvre le troisième chapitre du man de zlib.</description>
    </item>
    
    <item>
      <title>Intérêt de make_shared</title>
      <link>https://phidra.github.io/blog/2020-02-15-make_shared/</link>
      <pubDate>Fri, 14 Feb 2020 15:08:25 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/2020-02-15-make_shared/</guid>
      <description>Ça sert à quoi make_shared ? Quel est l&amp;#8217;intérêt de make_shared ? Après tout, on peut très bien s&amp;#8217;en passer pour créer des shared_ptr :
 shared_ptr&amp;lt;int&amp;gt; age{new int(42)};   Par rapport à la ligne qui précède, quelle est la valeur ajoutée de la ligne suivante :
 shared_ptr&amp;lt;int&amp;gt; age = make_shared&amp;lt;int&amp;gt;(42);   TL;DR : c&amp;#8217;est plus un peu plus efficace, et un peu moins risqué.
   Mais au fait, ça marche comment, shared_ptr ?</description>
    </item>
    
    <item>
      <title>Articles, talks, blogposts, et autres liens</title>
      <link>https://phidra.github.io/blog/menu/notes/</link>
      <pubDate>Wed, 01 Jan 2020 12:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/menu/notes/</guid>
      <description>Liste des liens    Pourquoi cette page [VIDEO] KEYNOTE: What Everyone Should Know About How Amazing Compilers Are - Matt Godbolt C++ on Sea 2019 [POST] But I was helping the compiler! [POST] The Urban Legend of the 10X Developer [COURS] Programmation dynamique [VIDEO] Lecture 1: Algorithmic Thinking, Peak Finding [ARTICLE] I&amp;#8217;m not feeling the async pressure [ARTICLE] Backpressure explained — the resisted flow of data through software [ARTICLE] CRC vs hash functions [ARTICLE] How TCP Sockets Work [ARTICLE] The Tail at Scale [ARTICLE] Response Times: The 3 Important Limits [POST] Dismissing Python Garbage Collection at Instagram [GIST] Latency numbers every programmer should know [POST] What every developer should know about TCP [POST] Invariants and Preconditions [VIDEO] Systematic error handling in C++, aussi sur youtube [VIDEO] Understanding the Python GIL, voir aussi le post qui va avec [POST] A successful deployment model [POST] Systems design for Advanced Beginners [POST] Our journey to type checking 4 million lines of Python [VIDEO] 19.</description>
    </item>
    
    <item>
      <title>Mes références</title>
      <link>https://phidra.github.io/blog/menu/references/</link>
      <pubDate>Wed, 01 Jan 2020 11:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/menu/references/</guid>
      <description>Work in progress &amp;#8594; liste non-exhaustive.
 Elle n&amp;#8217;est pas particulièrement triée : c&amp;#8217;est pas parce qu&amp;#8217;un item est en haut que je le juge plus intéressant que son voisin du dessous.
   Sources   Sam &amp;amp; Max : on ne les présente plus. Si ? C&amp;#8217;est l&amp;#8217;une des ressources francophones sur python des plus pédagogiques, très accessibles aux débutants. Le blog est freezé mais reste en ligne, c&amp;#8217;est l&amp;#8217;une des références qui m&amp;#8217;a donnée envie de blogger.</description>
    </item>
    
    <item>
      <title>À propos</title>
      <link>https://phidra.github.io/blog/menu/about/</link>
      <pubDate>Wed, 01 Jan 2020 10:00:00 +0100</pubDate>
      
      <guid>https://phidra.github.io/blog/menu/about/</guid>
      <description>Quoi Je suis Phidra, développeur depuis une douzaine d&amp;#8217;années → ce blog contient des posts liés au développement, surtout en C++ (e.g. utilité de make_shared) et en python (e.g. le packaging python) qui sont mes langages principaux, mais également des structures de données ou algorithmes (e.g. l&amp;#8217;algorithme de Sattolo), des outils (e.g. les sections de man), voire des sujets liés à la vie de développeur (e.g. le projet Aristote).
   Comment Ce blog est généré avec hugo.</description>
    </item>
    
  </channel>
</rss>